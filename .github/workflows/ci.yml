name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:     
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build the application using Maven  
    - name: Build with Maven
      run: |
        # mvn dependency:purge-local-repository
        mvn -B package --file pom.xml -DskipTests

    - name: Run Build Complete
      run: echo "Run Build Completed"

    - name: Upload jar as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ vars.JAR_NAME }}
        path: target/*.jar

    # TODO: The workflow permissions should be set to "Read and Write" to test this part.
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # Submitting the graph improves the quality of Dependabotâ€™s checks.
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
    #  with:
    #    github_token: ${{ secrets.GITHUB_TOKEN }}

  update-dependencies:
    needs: build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PR_EXIST: 'false'

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Install dependencies using maven
      run: mvn install -DskipTests

    - name: Check if a Pull Request exists
      run: |
        # Check if there is an open pull request with the title "${{ vars.DEPENDENCY_MANUAL_UPDATE_TITLE }}"
        pr_exists=$(gh pr list --state open --search "${{ vars.DEPENDENCY_MANUAL_UPDATE_TITLE }}" --json title -q ".[].title")
        if [[ ! -z "$pr_exists" ]]; then
          echo "A pull request already exists."
          echo "GITHUB_PR_EXIST=true" >> $GITHUB_ENV
          exit 0
        fi

    - name: Create Pull Request if not exists and dependencies are outdated
      run: |
        # Only continue when the pr is not exist
        if [[ "$GITHUB_PR_EXIST" == 'false' ]]; then
          # Check for dependency updates
          echo "Check for dependency updates"
          dependency_updates=$(mvn versions:display-dependency-updates)
          # Only continue if there are new dependencies
          if [[ "$dependency_updates" == *"newer versions"* ]]; then
            echo "Outdated dependencies found."
  
            # Update dependencies to the latest versions
            mvn versions:use-latest-versions -DallowSnapshots=false
            mvn versions:update-parent -DartifactId=spring-boot-starter-parent -DgroupId=org.springframework.boot
  
            echo "Check if there are changes in pom.xml"
            if ! git diff --exit-code --quiet; then
              echo "Changes detected, creating a pull request."
  
              # Generate a unique branch name and create new branch for the update
              branch_name="update-dependencies-$(date +%Y%m%d%H%M%S)"
              git checkout -b "$branch_name"
  
              # Set git user details for commit
              git config --global user.name "Github Actions"
              git config --global user.email "actions@github.com"
  
              # Commit, push the change, and create a PR
              git add pom.xml
              git commit -m "Update dependencies"
              git push origin "$branch_name"
              gh pr create --base main --head "$branch_name" --title "${{ vars.DEPENDENCY_MANUAL_UPDATE_TITLE }}" --body "Automated dependency updates"
            else
              echo "No changes detected in pom.xml. No pull request needed."
            fi
          else
            echo "No outdated dependencies found."
          fi
        fi

  test:
    needs: update-dependencies
    runs-on: ubuntu-latest
  
    steps: 
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
  
    # Run tests using Maven
    - name: Run Tests
      run: mvn test -X
  
    - name: Run Tests Complete
      run: echo "Run Tests Completed"
      
  build-and-push-docker-image:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Login to the Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Download the jar file.
      - name: Download the JAR file
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.JAR_NAME }}

      - name: List directory after downloading artifact
        run: ls -l

      - name: Create the target directory and move the JAR file.
        run: |
          mkdir -p target
          mv *.jar ./target
    
      # It helps you run builds on architectures like amd64, arm64, etc.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # It allows for multi-platform builds, build caching, and more efficient Docker image builds.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker tag
        run: echo "${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE }}:latest"
  
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_IMAGE }}:latest
          context: .
          file: ./Dockerfile

      - name: Build and Push Docker Image Complete
        run: echo "Build and Push Docker Image Complete" 
